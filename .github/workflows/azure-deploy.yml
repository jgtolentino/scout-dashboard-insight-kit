name: Azure App Service CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit and integration tests
        run: npm run test:run

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write           # required for OIDC login
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy essential files for Vite deployment
          cp package.json deploy/
          cp -r dist deploy/
          
          # Create a simple server.js for Azure App Service
          cat > deploy/server.js << 'EOF'
          const express = require('express');
          const path = require('path');
          const app = express();
          
          // Serve static files from dist directory
          app.use(express.static(path.join(__dirname, 'dist')));
          
          // Handle client-side routing
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'dist', 'index.html'));
          });
          
          const port = process.env.PORT || 8080;
          app.listen(port, () => {
            console.log(`Scout Analytics Dashboard running on port ${port}`);
          });
          EOF
          
          # Update package.json to include express and set start script
          cd deploy
          npm install express
          
          # Zip deployment package
          cd ..
          zip -r scout-dashboard-deploy.zip deploy/

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: scout-analytics-dashboard
          package: scout-dashboard-deploy.zip
          slot-name: production

      - name: Health Check
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Check if the app is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" https://scout-analytics-dashboard.azurewebsites.net/ || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Deployment successful - Application is responding"
            echo "üîó App URL: https://scout-analytics-dashboard.azurewebsites.net/"
          else
            echo "‚ùå Deployment may have issues - HTTP response: $response"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high --json | grep -q '"vulnerabilities"'; then
            echo "‚ùå High or critical vulnerabilities found"
            npm audit --audit-level=high
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
          fi